//
//  CheckConnectionViewController.swift
//  AdBlock
//
//  Created by Igor Ryazancev on 3/5/20.
//  Copyright Â© 2020 DEVBUFF. All rights reserved.
//

import UIKit
import Firebase
import FirebaseRemoteConfig

final class CheckConnectionViewController: UIViewController {

    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var subtitleLabel: UILabel!
    @IBOutlet weak var checkConnectionButton: UIButton!
    

    @IBAction func checkConnectionButtonAction(_ sender: Any) {
        let scanVC = SystemScanViewController(nibName: "SystemScanViewController", bundle: nil)
        navigationController?.pushViewController(scanVC, animated: true)
    }
}

//MARK: - Lifecycle
extension CheckConnectionViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        navigationController?.navigationBar.isHidden = true
        setup()
    }
    
}

//MARK: - Setups
private extension CheckConnectionViewController {
    
    func setup() {
        setupRemoteConfig()
        fetchRemoteConfig()
    }
    
    func updateVew() {
        let rc = RemoteConfig.remoteConfig()
        let buttonString = rc.configValue(forKey: "button_screen_1").stringValue
        let titleString = rc.configValue(forKey: "title_screen_1").stringValue
        let subtitleString = rc.configValue(forKey: "subtitle_screen_1").stringValue
        DispatchQueue.main.async { [unowned self] in
            self.checkConnectionButton.setTitle(buttonString, for: .normal)
            self.titleLabel.text = titleString
            self.subtitleLabel.text = subtitleString
        }
        
    }
    
    func setupRemoteConfig() {
        let defaultValues: [String: Any] = ["button_screen_1": "CHECK CONNECTION",
                                            "title_screen_1": "Your connection is not safe!",
                                            "subtitle_screen_1": "Low security remarks: 43%"]
        RemoteConfig.remoteConfig().setDefaults(defaultValues as? [String : NSObject])
        updateVew()
    }
    
    func enableDeveloperMode() {
        
    }
    
    func fetchRemoteConfig() {
        RemoteConfig.remoteConfig().fetch(withExpirationDuration: 0) { [unowned self] (status, error) in
            if error == nil {
                print("status  \(status.rawValue)")
                RemoteConfig.remoteConfig().activate { (error) in
                    print("aactivate error \(error?.localizedDescription ?? "")")
                    self.updateVew()
                }
            } else {
                print(error?.localizedDescription ?? "")
            }
        }
    }
    
}
