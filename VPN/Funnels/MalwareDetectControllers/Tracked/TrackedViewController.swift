//
//  TrackedViewController.swift
//  AdBlock
//
//  Created by Igor Ryazancev on 3/5/20.
//  Copyright Â© 2020 DEVBUFF. All rights reserved.
//

import UIKit
import Firebase
import FirebaseRemoteConfig

final class TrackedViewController: UIViewController {

    @IBOutlet private weak var titleLabel: UILabel!
    @IBOutlet private weak var subTitleLabel: UILabel!
    @IBOutlet private weak var listTitleLabel: UILabel!
    @IBOutlet private weak var firstListLabel: UILabel!
    @IBOutlet private weak var secondListLabel: UILabel!
    @IBOutlet private weak var thirdListLabel: UILabel!
    @IBOutlet private weak var fourListLabel: UILabel!
    @IBOutlet private weak var underButtonTitleLabel: UILabel!
    @IBOutlet private weak var turnOnButton: UIButton!
    
    private let iap = IAPManager.shared
    
    private var alertTitle = "Confirm connection secure"
    private var alertSubtitle = "Tap the button on the next screen to secure your connection"
    
    //MARK: - Actions
    @IBAction private func turnOnButtonAction(_ sender: Any) {
        showConfirmAlert()
    }
    
    @objc private func openInApps() {
        self.iap.purchaseProduct(productType: .weekly)
    }
    
}

//MARK: - Lifecycle
extension TrackedViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()

        setup()
        DispatchQueue.main.async { [unowned self] in
            self.setupAlert(purchase: false)
        }
    }
    
}

//MARK: - Setups
private extension TrackedViewController {
    
    func setup() {
        //iap.delegate = self
        setupRemoteConfig()
        fetchRemoteConfig()
    }
    
    func updateVew() {
        let rc = RemoteConfig.remoteConfig()
        let titleString = rc.configValue(forKey: "title_screen_3").stringValue
        let subTitleString = rc.configValue(forKey: "subtitle_screen_3").stringValue
        let listTitleString = rc.configValue(forKey: "list_title_screen_3").stringValue
        let firstListString = rc.configValue(forKey: "first_list_screen_3").stringValue
        let secondListString = rc.configValue(forKey: "second_list_screen_3").stringValue
        let thirdListString = rc.configValue(forKey: "third_list_screen_3").stringValue
        let fourListString = rc.configValue(forKey: "four_list_screen_3").stringValue
        let underButtonTitleString = rc.configValue(forKey: "under_button_title_screen_3").stringValue
        let turnOnButtonString = rc.configValue(forKey: "button_title_screen_3").stringValue
        let alertTitleString = rc.configValue(forKey: "lowsecurity_alert_confirm_title").stringValue
        let alertSubtitleString = rc.configValue(forKey: "lowsecurity_alert_confirm_desc").stringValue
        DispatchQueue.main.async { [unowned self] in
            self.titleLabel.text = titleString
            self.subTitleLabel.text = subTitleString
            self.listTitleLabel.text = listTitleString
            self.firstListLabel.text = firstListString
            self.secondListLabel.text = secondListString
            self.thirdListLabel.text = thirdListString
            self.fourListLabel.text = fourListString
            self.underButtonTitleLabel.text = underButtonTitleString
            self.alertTitle = alertTitleString ?? ""
            self.alertSubtitle = alertSubtitleString ?? ""
            self.turnOnButton.setTitle(turnOnButtonString, for: .normal)
        }
        
    }
    
    func setupRemoteConfig() {
        let defaultValues: [String: Any] = ["title_screen_3": "You are tracked!",
                                            "subtitle_screen_3": "Low security device: 43%",
                                            "list_title_screen_3": "Your connection must be secure:",
                                            "first_list_screen_3": "1. Your data can be tracked and stolen",
                                            "second_list_screen_3": "2. You can become spam victim",
                                            "third_list_screen_3": "3. Low speed connection",
                                            "four_list_screen_3": "4. Avoid blocked content",
                                            "under_button_title_screen_3": "Your connection is insecure!",
                                            "button_title_screen_3": "Turn ON Protection",
                                            "lowsecurity_alert_confirm_title": "Confirm connection secure",
                                            "lowsecurity_alert_confirm_desc": "Tap the button on the next screen to secure your connection"]
        RemoteConfig.remoteConfig().setDefaults(defaultValues as? [String : NSObject])
        updateVew()
    }
    
    func enableDeveloperMode() {
      
        
    }
    
    func fetchRemoteConfig() {
        RemoteConfig.remoteConfig().fetch(withExpirationDuration: 0) { [unowned self] (status, error) in
            if error == nil {
                print("status  \(status.rawValue)")
                RemoteConfig.remoteConfig().activate { (error) in
                    print("aactivate error \(error?.localizedDescription ?? "")")
                    self.updateVew()
                }
            } else {
                print(error?.localizedDescription ?? "")
            }
        }
    }
    
    func setupAlert(purchase: Bool) {
        let alert = UIAlertController(title: purchase ? "Confirm removal" : "Malware Detected!",
                                      message: purchase ? "You will need to enter your password or use Touch-ID" : "39 viruses were found", preferredStyle: .alert)
        let okAction = UIAlertAction(title: "Ok", style: .cancel) { [unowned self] (_) in
            //if purchase {
                
            
        }
        
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        
        if purchase {
            alert.addAction(cancelAction)
        }
        alert.addAction(okAction)
        present(alert, animated: true, completion: nil)
    }
    
    func showConfirmAlert() {
        let alert = UIAlertController(title: alertTitle, message: alertSubtitle, preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "Cancel", style: .default) { [unowned self] (_) in
            self.iap.purchaseProduct(productType: .weekly)
        }
        
        let okAction = UIAlertAction(title: "Ok", style: .default) { [unowned self] (_) in
            self.iap.purchaseProduct(productType: .weekly)
        }
        
        alert.addAction(cancelAction)
        alert.addAction(okAction)
        present(alert, animated: true, completion: nil)
    }
    
    
    
}

extension TrackedViewController: IAPManagerDelegate {
    
    func inAppLoadingStarted() {
        showSpinner(onView: view)
    }
    
    func inAppLoadingSucceded(productType: ProductType) {
        removeSpinner()
        let vc = AllSetViewController(nibName: "AllSetViewController", bundle: nil)
        self.navigationController?.pushViewController(vc, animated: true)
        
    }
    
    func inAppLoadingFailed(error: Error?) {
        removeSpinner()
        if iap.hasSubscription() {
            let vc = AllSetViewController(nibName: "AllSetViewController", bundle: nil)
            navigationController?.pushViewController(vc, animated: true)
        }
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(openInApps))
        view.addGestureRecognizer(tapGesture)
    }
    
    func subscriptionStatusUpdated(value: Bool) {
        
    }
    
}
